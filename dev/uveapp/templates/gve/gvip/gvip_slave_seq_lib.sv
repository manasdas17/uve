/****************************************************************************
 *	Copyright 2012 HES-SO HEIG-VD
 *	Copyright 2011 HES-SO Valais Wallis
 *	Copyright 2007-2010 Mentor Graphics Corporation
 *	Copyright 2007-2010 Cadence Design Systems, Inc.
 *	Copyright 2010 Synopsys, Inc.
 *	All Rights Reserved Worldwide
 *
 *	Licensed under the Apache License, Version 2.0 (the "License");
 *	you may not use this file except in compliance with the License.
 *	You may obtain a copy of the License at
 *
 *		http://www.apache.org/licenses/LICENSE-2.0
 *
 *	Unless required by applicable law or agreed to in writing, software
 *	distributed under the License is distributed on an "AS IS" BASIS,
 *	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *	See the License for the specific language governing permissions and
 *	limitations under the License.
 ****************************************************************************
 * This file has been generated by UVE version $@uve_version@$
 * Date of generation: $@date@$
 *
 * Project : $@projectname@$
 * File : $@filename@$
 * Version : 1.0
 ****************************************************************************
 * Description :
 * Here are described slave sequences.
 ****************************************************************************/

`ifndef $@FILENAME@$
`define $@FILENAME@$

`include "uvm_macros.svh"

class $@ClassName@$ extends uvm_sequence #(gvip_transfer);

        // Transfer used in this sequence
        gvip_transfer util_transfer;

        // Provide implementations of virtual methods such as get_type_name and create
        `uvm_object_utils(gvip_slave_response_seq)

        // This macro declare the variable p_sequencer that point a sequencer.
        // Here the slave_sequencer.
        `uvm_declare_p_sequencer(gvip_slave_sequencer)

        // Constructor
        function new(string name = "gvip_slave_response_seq");
                super.new(name);
        endfunction

        // Pre do
        virtual task pre_do(bit is_item);

/*---------------------------------------------------------------------------
 * @TODO : Prepare response (res) in function of the request (util_transfer)
 * using `uvm_do and `uvm_do_with
 * NOTE : Don't care the is_item bit (Refer to the UVM Class Reference for
 * more info)
 *--------------------------------------------------------------------------*/

        endtask : pre_do

        // Body
        virtual task body();

                // Diplay start of sequence
                `uvm_info(get_type_name(),
                        $psprintf("%s starting...",
                        get_sequence_path()), UVM_MEDIUM);

                // Create the item res (this item will be send as response)
                $cast(req, create_item(gvip_transfer::get_type(), p_sequencer, "req"));

                forever begin

                        // Get request
                        p_sequencer.seq_item_port.peek(util_transfer);

                        // Need to raise/drop objection before each item because we don't want
                        // to be stopped in the middle of a transfer.
                        starting_phase.raise_objection(this);

                        start_item(req);		// Call pre_do
                finish_item(req);		// Send the item and call post_do

                starting_phase.drop_objection(this);
                end

        endtask : body

        // Post do
        function void post_do(uvm_sequence_item this_item);

/*---------------------------------------------------------------------------
 * @TODO : Update slave
 * Example : update memory/registers, ...
 * NOTE : this_item = parameter of finish_item = req
 *--------------------------------------------------------------------------*/

        endfunction : post_do

endclass : $@ClassName@$

/*---------------------------------------------------------------------------
 * @TODO : Maybe declare other types of slave sequences
 * Example : with/without memory record, ...
 *--------------------------------------------------------------------------*/

`endif /* $@FILENAME@$ */
