/****************************************************************************
 *	Copyright 2012 HES-SO HEIG-VD
 *	Copyright 2011 HES-SO Valais Wallis
 *	Copyright 2007-2010 Mentor Graphics Corporation
 *	Copyright 2007-2010 Cadence Design Systems, Inc.
 *	Copyright 2010 Synopsys, Inc.
 *	All Rights Reserved Worldwide
 *
 *	Licensed under the Apache License, Version 2.0 (the "License");
 *	you may not use this file except in compliance with the License.
 *	You may obtain a copy of the License at
 *
 *		http://www.apache.org/licenses/LICENSE-2.0
 *
 *	Unless required by applicable law or agreed to in writing, software
 *	distributed under the License is distributed on an "AS IS" BASIS,
 *	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *	See the License for the specific language governing permissions and
 *	limitations under the License.
 ****************************************************************************
 * This file has been generated by UVE version $@uve_version@$
 * Date of generation: $@date@$
 *
 * Project : $@projectname@$
 * File : $@filename@$
 * Version : 1.0
 ****************************************************************************
 * Description :
 * A collector is a passive entity that samples DUT signals but does not drive
 * them. Basic coverage and checking is also done.
 ****************************************************************************/

`ifndef $@FILENAME@$
`define $@FILENAME@$

`include "uvm_macros.svh"

class $@ClassName@$ extends uvm_component;

    // Enable or diseable collector's check and coverage functionalities
    bit checks_enable = 1;
    bit coverage_enable = 1;

    $@agent_class_name@$_config cfg;

    // Virtual Interface
    protected virtual $@vip_interface@$ vif;

    // Captured transfer
    protected $@vip_transfer@$ trans_collected;

    // Analysis_port to scoreboard
    uvm_analysis_port#($@vip_transfer@$) item_collected_port;

    // Covergroups
/*---------------------------------------------------------------------------
 * @TODO : Implement Covergroup(s)
 *--------------------------------------------------------------------------*/

    // Provide implementations of virtual methods such as get_type_name and create
    `uvm_component_utils_begin($@ClassName@$)
        `uvm_field_int(checks_enable, UVM_DEFAULT)
        `uvm_field_int(coverage_enable, UVM_DEFAULT)
    `uvm_component_utils_end

    /**********************************************************
     * Object creation
     **********************************************************/

    // Constructor
    function new(string name = "collector", uvm_component parent);
        super.new(name, parent);

        // Create covergroups
/*---------------------------------------------------------------------------
 * @TODO : Instanciate covergroup(s)
 *--------------------------------------------------------------------------*/

        // Creates captured transfer
        trans_collected = new();

        // Creating Analysis port
        item_collected_port = new("item_collected_port", this);

    endfunction : new

    // Build
    virtual function void build_phase(uvm_phase phase);

        if(!uvm_config_db#(virtual $@vip_interface@$)::get(this, "", "$@vip_interface@$", vif))
            `uvm_fatal("NOVIF",{"virtual interface must be set for: ",get_full_name(),".vif"});


        // Try to get a configuration object
        if (!uvm_config_db#($@agent_class_name@$_config)::get(this, "", "config", cfg))
            `uvm_fatal("GETCONFIGFAIL", "Failed to get the collector configuration")

        checks_enable = cfg.collector_checks_enable;
        coverage_enable = cfg.collector_coverage_enable;

    endfunction : build_phase


    /**********************************************************
     * Behavior
     **********************************************************/

    // Run
    virtual task run_phase(uvm_phase phase);
        fork
            collect_transactions();
        join
    endtask : run_phase

    // Collect the current transaction and perform check and coverage
    virtual protected task collect_transactions();
        forever begin

            // Collect the data from the bus into trans_collected
/*---------------------------------------------------------------------------
 * @TODO : Implement data collection
 *--------------------------------------------------------------------------*/
            $@ monitor_collect


            // Display transfer
            `uvm_info(get_type_name(),
                      $psprintf("Transfer collected :\n%s", trans_collected.sprint()),
                      UVM_HIGH)

            // -> send_to_sequencer;

            // Perform transfer checker
            if (checks_enable)
                perform_transfer_checks();

            // Perform transfer coverage
            if (coverage_enable)
                perform_transfer_coverage();

            // Transmit transfer via analysis port
            item_collected_port.write(trans_collected);
        end
    endtask : collect_transactions

    // Perform checks
    virtual protected function void perform_transfer_checks();

/*---------------------------------------------------------------------------
 * @TODO : Implement checks
 *--------------------------------------------------------------------------*/

    endfunction : perform_transfer_checks

    // Perform coverages
    virtual protected function void perform_transfer_coverage();

/*----------------------------------------------------------------------------
 * @TODO : Implement coverage
 *---------------------------------------------------------------------------*/

    endfunction : perform_transfer_coverage

endclass :  $@ClassName@$

`endif /* $@FILENAME@$ */
