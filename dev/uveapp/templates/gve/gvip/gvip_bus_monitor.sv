/****************************************************************************
 *	Copyright 2012 HES-SO HEIG-VD
 *	Copyright 2011 HES-SO Valais Wallis
 *	Copyright 2007-2010 Mentor Graphics Corporation
 *	Copyright 2007-2010 Cadence Design Systems, Inc.
 *	Copyright 2010 Synopsys, Inc.
 *	All Rights Reserved Worldwide
 *
 *	Licensed under the Apache License, Version 2.0 (the "License");
 *	you may not use this file except in compliance with the License.
 *	You may obtain a copy of the License at
 *
 *		http://www.apache.org/licenses/LICENSE-2.0
 *
 *	Unless required by applicable law or agreed to in writing, software
 *	distributed under the License is distributed on an "AS IS" BASIS,
 *	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *	See the License for the specific language governing permissions and
 *	limitations under the License.
 ****************************************************************************
 * This file has been generated by UVE version $@uve_version@$
 * Date of generation: $@date@$
 *
 * Project : $@projectname@$
 * File : $@filename@$
 * Version : 1.0
 ****************************************************************************
 * Description :
 * A bus monitor handles all the signals and transactions on a bus.
 ****************************************************************************/

`ifndef $@FILENAME@$
`define $@FILENAME@$

class $@ClassName@$ extends uvm_monitor;

        // Interface
        protected virtual $@vip_interface@$ vif;

        // The following two bits are used to control whether checks and coverage are
        // done both in the bus monitor class and the interface.
        bit checks_enable = 1;
        bit coverage_enable = 1;

        // Transaction counter
        protected int unsigned num_transaction = 0;

        // Analyse port
        uvm_analysis_port #($@vip_transfer@$) item_collected_port;

        // Transaction
        protected $@vip_transfer@$ trans_collected;

        // Coverage events
        protected event cov_transaction;
        protected event cov_transaction_beat;

/*---------------------------------------------------------------------------
 * @TODO : Implement Covergroup(s)
 *--------------------------------------------------------------------------*/

        // Provide implementations of virtual methods such as get_type_name and create
        `uvm_component_utils_begin($@ClassName@$)
                `uvm_field_int(checks_enable, UVM_DEFAULT)
                `uvm_field_int(coverage_enable, UVM_DEFAULT)
                `uvm_field_int(num_transaction, UVM_DEFAULT)
        `uvm_component_utils_end

        /**********************************************************
         * Object creation
         **********************************************************/

        // Constructor
        function new(string name = "bus_monitor", uvm_component parent);
                super.new(name,parent);

                // Create covergroups
/*---------------------------------------------------------------------------
 * @TODO : Instanciate covergroup(s)
 *--------------------------------------------------------------------------*/

                // Create transaction
                trans_collected = new();

                // Creating Analysis port
                item_collected_port = new("item_collected_port", this);

        endfunction : new

        // Build
        function void build_phase(uvm_phase phase);

                if(!uvm_config_db#(virtual $@vip_interface@$)::get(this, "", "$@vip_interface@$", vif))
                        `uvm_fatal("NOVIF",{"virtual interface must be set for: ",get_full_name(),".vif"});

        endfunction : build_phase

        /**********************************************************
         * Behavior
         **********************************************************/

        // Run
        task run_phase(uvm_phase phase);
                fork
                        collect_transaction();
                join
        endtask : run_phase


        /************************************************************************
         * Collection
         ************************************************************************/

        // Collect transaction
        virtual protected task collect_transaction();

                forever begin

                        // Collect the data from the bus into trans_collected
/*---------------------------------------------------------------------------
 * @TODO : Implement data collection
 *--------------------------------------------------------------------------*/
                        $@ monitor_collect

                        // -> send_to_sequencer;

                        // Display transfer
                        `uvm_info(get_type_name(),
                                $psprintf("Transfer collected :\n%s", trans_collected.sprint()),
                                UVM_HIGH)

                        // Perform checks
                        if(checks_enable)
                                perform_transfer_checks();

                        // Perform coverage
                        if(coverage_enable)
                                perform_transfer_coverage();

                        // Transmit the collected transfer
                        item_collected_port.write(trans_collected);

                end

        endtask : collect_transaction

        /************************************************************************
         * Checks
         ************************************************************************/

        function void perform_transfer_checks();

/*---------------------------------------------------------------------------
 * @TODO : Implement checks
 *--------------------------------------------------------------------------*/

        endfunction : perform_transfer_checks

        /*************************************************************************
         * Coverage
         *************************************************************************/

        function void perform_transfer_coverage();

/*----------------------------------------------------------------------------
 * @TODO : Implement coverage
 *---------------------------------------------------------------------------*/

        endfunction : perform_transfer_coverage

endclass : $@ClassName@$

`endif /* $@FILENAME@$ */
